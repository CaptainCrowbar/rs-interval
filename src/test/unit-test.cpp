// This file is generated by the discover-tests script

#include "test/unit-test.hpp"

using namespace RS::UnitTest;

void test_rs_interval_types_traits();
void test_rs_interval_types_boundary();
void test_rs_interval_types_from_string();
void test_rs_interval_continuous_contains_zero();
void test_rs_interval_continuous_interval_reciprocal();
void test_rs_interval_continuous_interval_arithmetic();
void test_rs_interval_continuous_interval_basic_properties();
void test_rs_interval_continuous_interval_construction();
void test_rs_interval_continuous_interval_to_string();
void test_rs_interval_continuous_interval_from_string();
void test_rs_interval_continuous_interval_order();
void test_rs_interval_continuous_interval_complement();
void test_rs_interval_continuous_interval_binary_operations();
void test_rs_interval_continuous_interval_hashing();
void test_rs_interval_continuous_boundary_inversion();
void test_rs_interval_continuous_boundary_addition();
void test_rs_interval_continuous_boundary_subtraction();
void test_rs_interval_continuous_boundary_formatting();
void test_rs_interval_continuous_boundary_from_interval();
void test_rs_interval_continuous_boundary_to_interval();
void test_rs_interval_continuous_boundary_adjacency();
void test_rs_interval_continuous_boundary_comparison();
void test_rs_interval_continuous_boundary_multiplication();
void test_rs_interval_continuous_map();
void test_rs_interval_continuous_set_construct_insert_erase();
void test_rs_interval_continuous_set_formatting();
void test_rs_interval_continuous_set_operations();
void test_rs_interval_integral_contains_zero();
void test_rs_interval_integral_interval_arithmetic();
void test_rs_interval_integral_interval_basic_properties();
void test_rs_interval_integral_interval_construction();
void test_rs_interval_integral_interval_to_string();
void test_rs_interval_integral_interval_from_string();
void test_rs_interval_integral_interval_iterators();
void test_rs_interval_integral_interval_order();
void test_rs_interval_integral_interval_complement();
void test_rs_interval_integral_interval_binary_operations();
void test_rs_interval_integral_interval_hashing();
void test_rs_interval_integral_boundary_inversion();
void test_rs_interval_integral_boundary_addition();
void test_rs_interval_integral_boundary_subtraction();
void test_rs_interval_integral_boundary_formatting();
void test_rs_interval_integral_boundary_from_interval();
void test_rs_interval_integral_boundary_to_interval();
void test_rs_interval_integral_boundary_adjacency();
void test_rs_interval_integral_boundary_comparison();
void test_rs_interval_integral_boundary_multiplication();
void test_rs_interval_integral_map();
void test_rs_interval_integral_set_construct_insert_erase();
void test_rs_interval_integral_set_formatting();
void test_rs_interval_integral_set_operations();
void test_rs_interval_ordered_interval_basic_properties();
void test_rs_interval_ordered_interval_construction();
void test_rs_interval_ordered_interval_to_string();
void test_rs_interval_ordered_interval_from_string();
void test_rs_interval_ordered_interval_order();
void test_rs_interval_ordered_interval_complement();
void test_rs_interval_ordered_interval_binary_operations();
void test_rs_interval_ordered_interval_hashing();
void test_rs_interval_ordered_boundary_formatting();
void test_rs_interval_ordered_boundary_from_interval();
void test_rs_interval_ordered_boundary_adjacency();
void test_rs_interval_ordered_boundary_comparison();
void test_rs_interval_ordered_map();
void test_rs_interval_ordered_set_construct_insert_erase();
void test_rs_interval_ordered_set_formatting();
void test_rs_interval_ordered_set_operations();
void test_rs_interval_stepwise_interval_basic_properties();
void test_rs_interval_stepwise_interval_construction();
void test_rs_interval_stepwise_interval_to_string();
void test_rs_interval_stepwise_interval_from_string();
void test_rs_interval_stepwise_interval_iterators();
void test_rs_interval_stepwise_interval_order();
void test_rs_interval_stepwise_interval_complement();
void test_rs_interval_stepwise_interval_binary_operations();
void test_rs_interval_stepwise_interval_hashing();
void test_rs_interval_stepwise_boundary_formatting();
void test_rs_interval_stepwise_boundary_from_interval();
void test_rs_interval_stepwise_boundary_adjacency();
void test_rs_interval_stepwise_boundary_comparison();
void test_rs_interval_stepwise_map();
void test_rs_interval_stepwise_set_construct_insert_erase();
void test_rs_interval_stepwise_set_operations();
void test_rs_interval_version();

int main(int argc, char** argv) {

    main_args = std::vector<std::string>(argv + 1, argv + argc);
    std::println("");
    std::println("{}Running unit tests{}", xhead, xreset);
    std::println("{}{}{}", xrule, rule, xreset);

    call_me_maybe(test_rs_interval_types_traits, "test_rs_interval_types_traits");
    call_me_maybe(test_rs_interval_types_boundary, "test_rs_interval_types_boundary");
    call_me_maybe(test_rs_interval_types_from_string, "test_rs_interval_types_from_string");
    call_me_maybe(test_rs_interval_continuous_contains_zero, "test_rs_interval_continuous_contains_zero");
    call_me_maybe(test_rs_interval_continuous_interval_reciprocal, "test_rs_interval_continuous_interval_reciprocal");
    call_me_maybe(test_rs_interval_continuous_interval_arithmetic, "test_rs_interval_continuous_interval_arithmetic");
    call_me_maybe(test_rs_interval_continuous_interval_basic_properties, "test_rs_interval_continuous_interval_basic_properties");
    call_me_maybe(test_rs_interval_continuous_interval_construction, "test_rs_interval_continuous_interval_construction");
    call_me_maybe(test_rs_interval_continuous_interval_to_string, "test_rs_interval_continuous_interval_to_string");
    call_me_maybe(test_rs_interval_continuous_interval_from_string, "test_rs_interval_continuous_interval_from_string");
    call_me_maybe(test_rs_interval_continuous_interval_order, "test_rs_interval_continuous_interval_order");
    call_me_maybe(test_rs_interval_continuous_interval_complement, "test_rs_interval_continuous_interval_complement");
    call_me_maybe(test_rs_interval_continuous_interval_binary_operations, "test_rs_interval_continuous_interval_binary_operations");
    call_me_maybe(test_rs_interval_continuous_interval_hashing, "test_rs_interval_continuous_interval_hashing");
    call_me_maybe(test_rs_interval_continuous_boundary_inversion, "test_rs_interval_continuous_boundary_inversion");
    call_me_maybe(test_rs_interval_continuous_boundary_addition, "test_rs_interval_continuous_boundary_addition");
    call_me_maybe(test_rs_interval_continuous_boundary_subtraction, "test_rs_interval_continuous_boundary_subtraction");
    call_me_maybe(test_rs_interval_continuous_boundary_formatting, "test_rs_interval_continuous_boundary_formatting");
    call_me_maybe(test_rs_interval_continuous_boundary_from_interval, "test_rs_interval_continuous_boundary_from_interval");
    call_me_maybe(test_rs_interval_continuous_boundary_to_interval, "test_rs_interval_continuous_boundary_to_interval");
    call_me_maybe(test_rs_interval_continuous_boundary_adjacency, "test_rs_interval_continuous_boundary_adjacency");
    call_me_maybe(test_rs_interval_continuous_boundary_comparison, "test_rs_interval_continuous_boundary_comparison");
    call_me_maybe(test_rs_interval_continuous_boundary_multiplication, "test_rs_interval_continuous_boundary_multiplication");
    call_me_maybe(test_rs_interval_continuous_map, "test_rs_interval_continuous_map");
    call_me_maybe(test_rs_interval_continuous_set_construct_insert_erase, "test_rs_interval_continuous_set_construct_insert_erase");
    call_me_maybe(test_rs_interval_continuous_set_formatting, "test_rs_interval_continuous_set_formatting");
    call_me_maybe(test_rs_interval_continuous_set_operations, "test_rs_interval_continuous_set_operations");
    call_me_maybe(test_rs_interval_integral_contains_zero, "test_rs_interval_integral_contains_zero");
    call_me_maybe(test_rs_interval_integral_interval_arithmetic, "test_rs_interval_integral_interval_arithmetic");
    call_me_maybe(test_rs_interval_integral_interval_basic_properties, "test_rs_interval_integral_interval_basic_properties");
    call_me_maybe(test_rs_interval_integral_interval_construction, "test_rs_interval_integral_interval_construction");
    call_me_maybe(test_rs_interval_integral_interval_to_string, "test_rs_interval_integral_interval_to_string");
    call_me_maybe(test_rs_interval_integral_interval_from_string, "test_rs_interval_integral_interval_from_string");
    call_me_maybe(test_rs_interval_integral_interval_iterators, "test_rs_interval_integral_interval_iterators");
    call_me_maybe(test_rs_interval_integral_interval_order, "test_rs_interval_integral_interval_order");
    call_me_maybe(test_rs_interval_integral_interval_complement, "test_rs_interval_integral_interval_complement");
    call_me_maybe(test_rs_interval_integral_interval_binary_operations, "test_rs_interval_integral_interval_binary_operations");
    call_me_maybe(test_rs_interval_integral_interval_hashing, "test_rs_interval_integral_interval_hashing");
    call_me_maybe(test_rs_interval_integral_boundary_inversion, "test_rs_interval_integral_boundary_inversion");
    call_me_maybe(test_rs_interval_integral_boundary_addition, "test_rs_interval_integral_boundary_addition");
    call_me_maybe(test_rs_interval_integral_boundary_subtraction, "test_rs_interval_integral_boundary_subtraction");
    call_me_maybe(test_rs_interval_integral_boundary_formatting, "test_rs_interval_integral_boundary_formatting");
    call_me_maybe(test_rs_interval_integral_boundary_from_interval, "test_rs_interval_integral_boundary_from_interval");
    call_me_maybe(test_rs_interval_integral_boundary_to_interval, "test_rs_interval_integral_boundary_to_interval");
    call_me_maybe(test_rs_interval_integral_boundary_adjacency, "test_rs_interval_integral_boundary_adjacency");
    call_me_maybe(test_rs_interval_integral_boundary_comparison, "test_rs_interval_integral_boundary_comparison");
    call_me_maybe(test_rs_interval_integral_boundary_multiplication, "test_rs_interval_integral_boundary_multiplication");
    call_me_maybe(test_rs_interval_integral_map, "test_rs_interval_integral_map");
    call_me_maybe(test_rs_interval_integral_set_construct_insert_erase, "test_rs_interval_integral_set_construct_insert_erase");
    call_me_maybe(test_rs_interval_integral_set_formatting, "test_rs_interval_integral_set_formatting");
    call_me_maybe(test_rs_interval_integral_set_operations, "test_rs_interval_integral_set_operations");
    call_me_maybe(test_rs_interval_ordered_interval_basic_properties, "test_rs_interval_ordered_interval_basic_properties");
    call_me_maybe(test_rs_interval_ordered_interval_construction, "test_rs_interval_ordered_interval_construction");
    call_me_maybe(test_rs_interval_ordered_interval_to_string, "test_rs_interval_ordered_interval_to_string");
    call_me_maybe(test_rs_interval_ordered_interval_from_string, "test_rs_interval_ordered_interval_from_string");
    call_me_maybe(test_rs_interval_ordered_interval_order, "test_rs_interval_ordered_interval_order");
    call_me_maybe(test_rs_interval_ordered_interval_complement, "test_rs_interval_ordered_interval_complement");
    call_me_maybe(test_rs_interval_ordered_interval_binary_operations, "test_rs_interval_ordered_interval_binary_operations");
    call_me_maybe(test_rs_interval_ordered_interval_hashing, "test_rs_interval_ordered_interval_hashing");
    call_me_maybe(test_rs_interval_ordered_boundary_formatting, "test_rs_interval_ordered_boundary_formatting");
    call_me_maybe(test_rs_interval_ordered_boundary_from_interval, "test_rs_interval_ordered_boundary_from_interval");
    call_me_maybe(test_rs_interval_ordered_boundary_adjacency, "test_rs_interval_ordered_boundary_adjacency");
    call_me_maybe(test_rs_interval_ordered_boundary_comparison, "test_rs_interval_ordered_boundary_comparison");
    call_me_maybe(test_rs_interval_ordered_map, "test_rs_interval_ordered_map");
    call_me_maybe(test_rs_interval_ordered_set_construct_insert_erase, "test_rs_interval_ordered_set_construct_insert_erase");
    call_me_maybe(test_rs_interval_ordered_set_formatting, "test_rs_interval_ordered_set_formatting");
    call_me_maybe(test_rs_interval_ordered_set_operations, "test_rs_interval_ordered_set_operations");
    call_me_maybe(test_rs_interval_stepwise_interval_basic_properties, "test_rs_interval_stepwise_interval_basic_properties");
    call_me_maybe(test_rs_interval_stepwise_interval_construction, "test_rs_interval_stepwise_interval_construction");
    call_me_maybe(test_rs_interval_stepwise_interval_to_string, "test_rs_interval_stepwise_interval_to_string");
    call_me_maybe(test_rs_interval_stepwise_interval_from_string, "test_rs_interval_stepwise_interval_from_string");
    call_me_maybe(test_rs_interval_stepwise_interval_iterators, "test_rs_interval_stepwise_interval_iterators");
    call_me_maybe(test_rs_interval_stepwise_interval_order, "test_rs_interval_stepwise_interval_order");
    call_me_maybe(test_rs_interval_stepwise_interval_complement, "test_rs_interval_stepwise_interval_complement");
    call_me_maybe(test_rs_interval_stepwise_interval_binary_operations, "test_rs_interval_stepwise_interval_binary_operations");
    call_me_maybe(test_rs_interval_stepwise_interval_hashing, "test_rs_interval_stepwise_interval_hashing");
    call_me_maybe(test_rs_interval_stepwise_boundary_formatting, "test_rs_interval_stepwise_boundary_formatting");
    call_me_maybe(test_rs_interval_stepwise_boundary_from_interval, "test_rs_interval_stepwise_boundary_from_interval");
    call_me_maybe(test_rs_interval_stepwise_boundary_adjacency, "test_rs_interval_stepwise_boundary_adjacency");
    call_me_maybe(test_rs_interval_stepwise_boundary_comparison, "test_rs_interval_stepwise_boundary_comparison");
    call_me_maybe(test_rs_interval_stepwise_map, "test_rs_interval_stepwise_map");
    call_me_maybe(test_rs_interval_stepwise_set_construct_insert_erase, "test_rs_interval_stepwise_set_construct_insert_erase");
    call_me_maybe(test_rs_interval_stepwise_set_operations, "test_rs_interval_stepwise_set_operations");
    call_me_maybe(test_rs_interval_version, "test_rs_interval_version");

    std::println("{}{}{}", xrule, rule, xreset);

    if (failures == 0) {
        std::println("{}OK - all tests passed{}", xpass, xreset);
    } else {
        std::println("{}*** Test failures: {}{}", xfail, failures, xreset);
    }

    std::println("");

    return failures;

}
