#!/usr/bin/env bash

# Run this to update the test harness if any unit tests have been changed

set -o errexit
set -o nounset
set -o pipefail
shopt -s globasciiranges globstar nullglob

if [[ "${TRACE-}" ]]; then
    set -o xtrace
fi

bin="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
root="$(readlink -f "$bin/..")"

if [ "${root##*/}" != "rs-interval" ]; then
    echo "*** Project root not found"
    exit 1
fi

src="$root/src"

if ! [ -d "$src" ]; then
    echo "*** Source directory not found: $src"
    exit 1
fi

cmake_file="$src/CMakeLists.txt"
test_harness="$src/test/unit-test.cpp"

test_files=$(grep -E '^\s*test/.+-test.cpp' $cmake_file \
    | grep -Fv 'test/unit-test.cpp' \
    | sed -E "s!test/!$src/&!")

test_functions=$(grep -Eh '^void [a-z0-9_]+\(\)' $test_files \
    | sed -E 's!void ([a-z0-9_]+)\(\).*!\1!')

cat << EOF > $test_harness
// This file is generated by the discover-tests script

#include "test/unit-test.hpp"

using namespace RS::UnitTest;

EOF

for f in $test_functions; do
    echo "void $f();" >> $test_harness
done

cat << EOF >> $test_harness

int main(int argc, char** argv) {

    main_args = std::vector<std::string>(argv + 1, argv + argc);
    std::println("");
    std::println("{}Running unit tests{}", xhead, xreset);
    std::println("{}{}{}", xrule, rule, xreset);

EOF

for f in $test_functions; do
    echo "    call_me_maybe($f, \"$f\");" >> $test_harness
done

cat << EOF >> $test_harness

    std::println("{}{}{}", xrule, rule, xreset);

    if (failures == 0) {
        std::println("{}OK - all tests passed{}", xpass, xreset);
    } else {
        std::println("{}*** Test failures: {}{}", xfail, failures, xreset);
    }

    std::println("");

    return failures;

}
EOF
